@model Chess.Models.Board

<link href="~/Content/chess.css" rel="stylesheet" />
<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.2.min.js"></script>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
@*<script src="~/js/chess.js"></script>*@


<input type="hidden" id="username" />
<table id="chessBoard">
    @{
        for (int i = 1; i <= 8; i++)
        {
            <tr>
                @for (int j = 1; j <= 8; j++)
                {
                    var cellId = i.ToString() + j.ToString();
                    var cellClass = ((i + j) % 2 == 0) ? "white" : "black";

                    <td id='@cellId' class='@cellClass'>
                        
                    </td>
                }
            </tr>
        }
    }
</table>

<script type="text/javascript">

    var connection = new signalR.HubConnectionBuilder().withUrl("/chessHub").build();

    connection.on("Chess", function (board) {
        for (i = 0; i < board.figures.length; i++) {
            var currentFigure = board.figures[i];

            var figureId = currentFigure.id;
            var figureColor = currentFigure.color;
            var figureType = currentFigure.type;
            

            var cellId = currentFigure.coordinates.row + "" + currentFigure.coordinates.col;

            $("td#" + cellId).append($('<div id=' + figureId + ' class=' + figureColor + figureType + ' data-color=' + figureColor + '></div>'));


            //Consider whether the element is removed and make the efect of explode
            //$("#" + result[1]).hide("explode", 1000);
            //$("#" + result[1]).remove();
        }

        $("div").draggable({
            containment: "#chessBoard",
            revert: "invalid",
            scroll: false,
            cursor: "move",
            start: function (event, ui) {
                x = ui.offset.top;
                y = ui.offset.left;
            },
            drag: function () {
            },
            stop: function (event, ui) { }
        });

        if (board.turnType === 0) {
            EnableBlackFigures();
        } else {
            EnableWhiteFigures();
        }
    });

    $("td").droppable({
        hoverClass: "ui-state-active",
        drop: function (event, ui) {

            var data = {
                FigureId: ui.draggable[0].id,
                TargetId: event.target.id,
                TargetCol: event.target.id.substr(1, 1),
                TargetRow: event.target.id.substr(0, 1)
            }

            connection.invoke('SendMessage', data).catch(error => {
                var debug = -1;
            });
        }
    })

    function EnableBlackFigures() {
        $("div[data-color=Black]").draggable('enable');
        $("div[data-color=White]").draggable('disable');
    }

    function EnableWhiteFigures() {
        $("div[data-color=Black]").draggable('disable');
        $("div[data-color=White]").draggable('enable');
    }

    connection.start().then(() => {
        console.log("Connection is established");
        connection.invoke('SendMessage', null).catch(error => {
            // Handle the error
        });
    });

    @*$("div").click(function (event) {
        var elementId = event.target.id;

        var model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model) as String);
        var currentFigurePossibleMoves = model.figures.find((figure) => figure.Id === elementId).PossibleMoves;
        for (var i = 0; i < currentFigurePossibleMoves.length; i++) {
            $("#" + currentFigurePossibleMoves[i].Row + "" + currentFigurePossibleMoves[i].Col).addClass("pink");
        }
    });*@

    

    

</script>

