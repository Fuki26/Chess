@model Chess.Models.Board

<link href="~/Content/chess.css" rel="stylesheet" />
<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.2.min.js"></script>

<script src="~/js/signalr/dist/browser/signalr.js"></script>


<input type="hidden" id="username" />
<table id="chessBoard">
    @{
        for (int row = 1; row <= 8; row++)
        {
            <tr>
                @for (int column = 1; column <= 8; column++)
                {
                    var cellId = row.ToString() + column.ToString();
                    var cellClass = ((row + column) % 2 == 0) ? "white" : "black";

                    <td id='@cellId' class='@cellClass'>
                        
                    </td>
                }
            </tr>
        }
    }
</table>

<script type="text/javascript">
    
    var connection = new signalR.HubConnectionBuilder().withUrl("/chessHub").build();
    var board;

    //#region Receive board functionality

    connection.on("ReceiveMessage", function (board) {
        board = board;
        //Remove all figures out from the board
        $("div").remove();
        // Reset td classes in order to get initial board
        $("td").removeClass("pink");

        for (i = 0; i < board.figures.length; i++) {
            var currentFigure = board.figures[i];

            var figureId = currentFigure.id;
            var figureColor = currentFigure.color;
            var figureType = currentFigure.type;

            var cellId = currentFigure.coordinates.row + "" + currentFigure.coordinates.col;

            var newFigure = $('<div id=' + figureId + ' class=' + figureColor + figureType + ' data-color=' + figureColor + '></div>');

            newFigure.click(attachClickForPossibleMovesShowing.bind(currentFigure));

            function attachClickForPossibleMovesShowing() {
                $("td").removeClass("pink");
                for (var i = 0; i < this.possibleMoves.length; i++) {
                    $("#" + this.possibleMoves[i].row + "" + this.possibleMoves[i].col).addClass("pink");
                }
            }

            $("td#" + cellId).append(newFigure);
        }

        $("div").draggable({
            containment: "#chessBoard",
            revert: "invalid",
            scroll: false,
            cursor: "move",
            start: function (event, ui) {
                x = ui.offset.top;
                y = ui.offset.left;
            },
            drag: function () {
            },
            stop: function (event, ui) { }
        });

        if (board.turnType === 0) {
            EnableBlackFigures();
        } else {
            EnableWhiteFigures();
        }
    });

    function EnableBlackFigures() {
        $("div[data-color=Black]").draggable('enable');
        $("div[data-color=White]").draggable('disable');
    }

    function EnableWhiteFigures() {
        $("div[data-color=Black]").draggable('disable');
        $("div[data-color=White]").draggable('enable');
    }


    //#endregion

    connection.start().then(function () {
    }).catch(function (err) {
        return console.error(err.toString());
    });

    //#region Send request for initial rendering

    setTimeout(() => {
        connection.invoke("SendMessage", null).catch(function (err) {
            return console.error(err.toString());
        });
    }, 500);

    //#endregion

    $("td").droppable({
        hoverClass: "ui-state-active",
        drop: function (event, ui) {
            
            var data = {
                FigureId: ui.draggable[0].id,
                TargetId: event.target.id,
                TargetCol: parseInt(event.target.id.substr(1, 1)),
                TargetRow: parseInt(event.target.id.substr(0, 1))
            }

            connection.invoke("SendMessage", data).catch(function (err) {
                return console.error(err.toString());
            });
        }
    })
</script>

